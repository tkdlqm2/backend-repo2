name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: self-hosted  # 'ubuntu-latest'에서 'self-hosted'로 변경

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle (Skip Tests)
        run: ./gradlew clean build -x test

      # JAR 파일 확인 및 위치 검사
      - name: Check JAR file
        run: |
          echo "Checking build outputs..."
          find . -name "*.jar" | grep -v "gradle-wrapper.jar"
          mkdir -p build/libs/
          # JAR 파일 확인 및 복사
          if [ -f "build/libs/payment-service-0.0.1-SNAPSHOT.jar" ]; then
            echo "JAR file found at expected location."
          else
            echo "Looking for any JAR file..."
            FOUND_JAR=$(find . -name "*.jar" | grep -v "gradle-wrapper.jar" | head -1)
            if [ -n "$FOUND_JAR" ]; then
              echo "Found JAR at $FOUND_JAR, copying to build/libs/payment-service-0.0.1-SNAPSHOT.jar"
              cp "$FOUND_JAR" build/libs/payment-service-0.0.1-SNAPSHOT.jar
            else
              echo "No JAR file found, build may have failed."
              exit 1
            fi
          fi

      # Dockerfile 수정: JAR 파일 이름 확인
      - name: Update Dockerfile
        run: |
          # 변경된 Dockerfile 생성
          cat > Dockerfile.new << 'EOF'
          FROM openjdk:17-slim

          WORKDIR /app

          COPY build/libs/payment-service-0.0.1-SNAPSHOT.jar app.jar

          EXPOSE 8081

          ENTRYPOINT ["java", "-jar", "app.jar"]
          EOF
          
          # 새 Dockerfile로 교체
          mv Dockerfile.new Dockerfile
          cat Dockerfile

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: mongwaves
          password: ${{ secrets.DOCKER_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            mongwaves/payment-service:latest
            mongwaves/payment-service:${{ github.sha }}

      # 쿠버네티스 배포를 위한 설정
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      # Base64 디코딩 및 kubeconfig 설정
      - name: Set up kubeconfig with debugging
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig.yaml
          chmod 600 kubeconfig.yaml
          echo "KUBECONFIG=$(pwd)/kubeconfig.yaml" >> $GITHUB_ENV
          
          # 디버깅용 (선택 사항)
          echo "Kubeconfig file size: $(wc -c < kubeconfig.yaml) bytes"
          grep "server:" kubeconfig.yaml | sed 's/\(server: https:\/\/\)[^:]*\(.*\)/\1[REDACTED]\2/'


      # API 서버 연결 테스트
      - name: Test Kubernetes connection
        run: |
          kubectl get nodes
          kubectl cluster-info

      # 배포 적용 (디렉토리 이름 확인 필요)
      - name: Deploy to Kubernetes
        run: |
          export KUBECONFIG=$HOME/.kube/config

          # 이미지 태그 업데이트
          sed -i "s|mongwaves/payment-service:latest|mongwaves/payment-service:${{ github.sha }}|g" kubernetes/deployment.yaml

          # 배포 적용 (유효성 검사 건너뛰기)
          kubectl apply -f kubernetes/namespace.yaml --validate=false
          kubectl apply -f kubernetes/configmap.yaml --validate=false
          kubectl apply -f kubernetes/secret.yaml --validate=false
          kubectl apply -f kubernetes/deployment.yaml --validate=false
          kubectl apply -f kubernetes/service.yaml --validate=false

          # 배포 완료 확인
          kubectl rollout status deployment/payment-service -n payment-service --timeout=60s
